@page "/venues/create-venue"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using RSAllies.Client.Contracts
@using RSAllies.Client.HelperTypes

@inject ApiClient ApiClient
@inject IDialogService DialogService

<!-- 
This is the CreateVenue page. It contains a form for creating a new venue.
The form includes fields for the venue's name, address, and capacity.
-->

<div class="container">
    <h3>CreateVenue</h3>

    <div class="div1">
        <FluentCard Width="400px">
            <!-- 
            This is the form for creating a new venue. 
            It uses data annotations for validation and binds to an InputModel instance.
            -->
            <EditForm Model="Input" method="post" FormName="CreateVenue" OnValidSubmit="Submit">
                <DataAnnotationsValidator />
                <FluentTextField @bind-Value="Input.Name" Label="Name" Style="width:100%;font-family:Bahnschrift" />
                <FluentValidationMessage For="@(() => Input.Name)" />
                <br /><br />
                <FluentTextField @bind-Value="Input.Address" Label="Address" Style="width:100%;font-family:Bahnschrift" />
                <FluentValidationMessage For="@(() => Input.Address)" />
                <br /><br />
                <FluentNumberField @bind-Value="Input.Capacity" Label="Capacity" Style="width:100%;font-family:Bahnschrift" />
                <FluentValidationMessage For="@(() => Input.Capacity)" />
                <br /> <br />
                <FluentButton BackgroundColor="#ee3026" Type="ButtonType.Submit" Style="width:100%;font-family:Bahnschrift;color:white">Create</FluentButton>
            </EditForm>
        </FluentCard>
    </div>


</div>

@code {
    // This is the model for the form. It includes properties for the venue's name, address, and capacity.
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new ();

    private sealed class InputModel
    {
        [Required]
        public string Name { get; set; } = string.Empty;

        [Required]
        public string Address { get; set; } = string.Empty;

        [Required]
        public int Capacity { get; set; }
    }

    // This method is called when the form is submitted.
    async void Submit()
    {
        var venue = new CreateVenueDto
        {
            Name = Input.Name,
            Address = Input.Address,
            Capacity = Input.Capacity
        };

        // Call the API to create the venue.
        var response = await ApiClient.CreateVenueAsync(venue);

        if (response!.IsSuccess)
        {
            // If the API call is successful, show a success message.
            DialogService.ShowSuccess("Venue created successfully.");
        }
        else
        {
            // If the API call is not successful, show an error message.
            DialogService.ShowError("Failed to create venue.", "Client_Error");
        }

    }
}

<style>
    .container {
        width: 100%;
        height: 100%;
        background-color: white;
        padding: 8px;
    }
    .div1{
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>